Object subclass: #Nota	instanceVariableNames: 'titulo fechaCreacion tags contenido'	classVariableNames: ''	poolDictionaries: ''	category: 'Practica6-EvernOOte'!!Nota commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	contenido:		<Object>	fechaCreacion:		<Object>	tags:		<Object>	titulo:		<Object>    Implementation Points!!Nota methodsFor: 'accessing' stamp: 'ema 5/12/2018 19:17'!fechaCreacion: anObject	fechaCreacion := anObject! !!Nota methodsFor: 'accessing' stamp: 'ema 5/12/2018 19:38'!size	^ (10 + contenido size + titulo size		+ (tags inject: 0 into: [ :sum :tag | sum + tag size ]))! !!Nota methodsFor: 'accessing' stamp: 'ema 5/12/2018 19:17'!titulo: anObject	titulo := anObject! !!Nota methodsFor: 'accessing' stamp: 'ema 5/12/2018 19:17'!contenido: anObject	contenido := anObject! !!Nota methodsFor: 'accessing' stamp: 'ema 5/12/2018 19:17'!fechaCreacion	^ fechaCreacion! !!Nota methodsFor: 'accessing' stamp: 'ema 5/12/2018 19:17'!tags	^ tags! !!Nota methodsFor: 'accessing' stamp: 'ema 5/12/2018 19:17'!titulo	^ titulo! !!Nota methodsFor: 'accessing' stamp: 'ema 5/22/2018 08:36'!tituloComo: string	^ titulo includesSubstring: string! !!Nota methodsFor: 'accessing' stamp: 'ema 5/12/2018 19:17'!contenido	^ contenido! !!Nota methodsFor: 'accessing' stamp: 'ema 5/12/2018 19:26'!tags: unaCol	tags := unaCol! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Nota class	instanceVariableNames: ''!!Nota class methodsFor: 'as yet unclassified' stamp: 'ema 5/12/2018 19:26'!titulo: unTitulo tags: unaCol contenido: unString	| nota |	nota := self new.	nota titulo: unTitulo.	nota tags: unaCol.	nota fechaCreacion: Date today.	nota contenido: unString.	^ nota! !Object subclass: #Notebook	instanceVariableNames: 'notas'	classVariableNames: ''	poolDictionaries: ''	category: 'Practica6-EvernOOte'!!Notebook commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	notas:		<Object>    Implementation Points!!Notebook methodsFor: 'initialization' stamp: 'ema 5/12/2018 19:12'!initialize	super initialize.	notas := Set new.! !!Notebook methodsFor: 'accessing' stamp: 'ema 5/12/2018 19:21'!notas	^ notas! !!Notebook methodsFor: 'accessing' stamp: 'ema 5/12/2018 19:39'!size	^ notas inject: 0 into: [ :sum :nota | sum + nota size ]! !!Notebook methodsFor: 'as yet unclassified' stamp: 'ema 5/12/2018 20:29'!notasConFecha: fecha	^ notas select: [ :n | (n fechaCreacion) = fecha ]! !!Notebook methodsFor: 'as yet unclassified' stamp: 'ema 5/12/2018 19:22'!agregarNota: unaNota	notas add: unaNota! !!Notebook methodsFor: 'as yet unclassified' stamp: 'ema 5/22/2018 08:35'!notasConTituloComo: titulo	^ notas select: [ :n | n tituloComo: titulo ]! !!Notebook methodsFor: 'as yet unclassified' stamp: 'ema 5/12/2018 20:05'!borrarNota: unaNota	notas remove: unaNota! !TestCase subclass: #TestEvernOOte	instanceVariableNames: 'usuario notebook1 notaConTitulo1 notaDeNotebook1 notaDeNotebook2 notaDelYear1990 notaConTitulo2 notebook2'	classVariableNames: ''	poolDictionaries: ''	category: 'Practica6-EvernOOte'!!TestEvernOOte commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	notaConTitulo1:		<Object>	notaDeNotebook1:		<Object>	notaDeNotebook2:		<Object>	notaDelYear1990:		<Object>	notebook1:		<Object>	usuario:		<Object>    Implementation Points!!TestEvernOOte methodsFor: 'tests' stamp: 'ema 5/12/2018 20:09'!testCreacion	| notebookNueva notaNueva |	notaNueva := Nota		titulo: 'Nueva'		tags: #('nota' 'nueva')		contenido: 'Esta es una nota nueva'.	notebookNueva := Notebook new.	usuario crearNotebook: notebookNueva.	notebookNueva agregarNota: notaNueva.	self assert: (notebookNueva notas includes: notaNueva).	notebookNueva borrarNota: notaNueva.	self deny: (notebookNueva notas includes: notaNueva).	self assert: (usuario notebooks includes: notebookNueva).	usuario borrarNotebook: notebookNueva .	self deny: (usuario notebooks includes: notebookNueva).! !!TestEvernOOte methodsFor: 'tests' stamp: 'ema 5/12/2018 19:56'!testBusquedas	self assert: ((usuario buscarPorNotebook: notebook1) includes: notaDeNotebook1).	self deny: ((usuario buscarPorNotebook: notebook1) includes: notaDeNotebook2).	self assert: ((usuario buscarPorTitulo: 'tulo1') includes: notaConTitulo1).	self deny: ((usuario buscarPorTitulo: 'tulo1') includes: notaConTitulo2).	self		assert: ((usuario buscarPorFecha: (Date year: 1990 day: 20)) includes: notaDelYear1990).	self deny: ((usuario buscarPorFecha: Date today) includes: notaDelYear1990).! !!TestEvernOOte methodsFor: 'initialization' stamp: 'ema 5/12/2018 20:28'!setUp	" usuario notebook1 notaConTitulo1 notaDeNotebook1 notaDeNotebook2 notaDelYear1990 notaConTitulo2"	usuario := UsuarioEvernOOte new.	notebook1 := Notebook new.	notebook2 := Notebook new.	notaDeNotebook1 := Nota		titulo: 'Nota de notebook1'		tags: #('note')		contenido: 'Nota de notebook1'.	notaDeNotebook1 := Nota		titulo: 'Nota de notebook2'		tags: #('note')		contenido: 'Nota de notebook2'.	notaDeNotebook2 := Nota		titulo: 'Nota de notebook2'		tags: #('note')		contenido: 'Nota de notebook2'.	notaDelYear1990 := Nota		titulo: 'Nota de 1990'		tags: #('1990' 'alf')		contenido: 'Nota de notebook2'.	notaDelYear1990 fechaCreacion: (Date year: 1990 day: 20).	notaConTitulo1 := Nota titulo: 'Titulo1' tags: #() contenido: 'Nota de titulo1'.	notaConTitulo2 := Nota titulo: 'Titulo2' tags: #() contenido: 'Nota de titulo2'.	" usuario notebook1 notaConTitulo1 notaDeNotebook1 notaDeNotebook2 notaDelYear1990 notaConTitulo2"	usuario		crearNotebook: notebook1;		crearNotebook: notebook2.	notebook1		agregarNota: notaConTitulo1;		agregarNota: notaDeNotebook1;		agregarNota: notaDelYear1990.	notebook2		agregarNota: notaDeNotebook2;		agregarNota: notaConTitulo2! !Object subclass: #UsuarioEvernOOte	instanceVariableNames: 'notebooks'	classVariableNames: ''	poolDictionaries: ''	category: 'Practica6-EvernOOte'!!UsuarioEvernOOte commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	notebooks:		<Object>    Implementation Points!!UsuarioEvernOOte methodsFor: 'initialization' stamp: 'ema 5/12/2018 19:03'!initialize	super initialize.	notebooks := Set new! !!UsuarioEvernOOte methodsFor: 'test' stamp: 'ema 5/12/2018 20:07'!notebooks	^ notebooks! !!UsuarioEvernOOte methodsFor: 'as yet unclassified' stamp: 'ema 5/12/2018 19:21'!buscarPorNotebook: unaNotebook	^ unaNotebook notas! !!UsuarioEvernOOte methodsFor: 'as yet unclassified' stamp: 'ema 5/12/2018 19:03'!borrarNotebook: notebook	notebooks remove: notebook! !!UsuarioEvernOOte methodsFor: 'as yet unclassified' stamp: 'ema 5/12/2018 19:08'!buscarPorTitulo: titulo| resultado |resultado := Set new.	(notebooks collect: [ :n | n notasConTituloComo: titulo ]) do: [ :notas | resultado addAll: notas ].	^ resultado ! !!UsuarioEvernOOte methodsFor: 'as yet unclassified' stamp: 'ema 5/12/2018 19:02'!crearNotebook: notebook	notebooks add: notebook ! !!UsuarioEvernOOte methodsFor: 'as yet unclassified' stamp: 'ema 5/12/2018 19:19'!buscarPorFecha: fecha	| resultado |	resultado := Set new.	(notebooks collect: [ :n | n notasConFecha: fecha ])		do: [ :notas | resultado addAll: notas ].	^ resultado! !