Object subclass: #Figure	instanceVariableNames: 'type width'	classVariableNames: ''	poolDictionaries: ''	category: 'Practica7-Figura'!!Figure methodsFor: 'accessing' stamp: 'ema 5/18/2018 17:40'!perimetro	^ self subclassResponsibility! !!Figure methodsFor: 'accessing' stamp: 'ema 5/18/2018 17:40'!area	^ self subclassResponsibility ! !Figure subclass: #Circle	instanceVariableNames: 'radio'	classVariableNames: ''	poolDictionaries: ''	category: 'Practica7-Figura'!!Circle methodsFor: 'accessing' stamp: 'ema 5/18/2018 17:24'!radio	^ radio! !!Circle methodsFor: 'accessing' stamp: 'ema 5/19/2018 08:54'!perimetro^ 2 * radio * Float pi! !!Circle methodsFor: 'accessing' stamp: 'ema 5/19/2018 08:45'!area	^ Float pi * radio * radio! !!Circle methodsFor: 'accessing' stamp: 'ema 5/18/2018 17:24'!radio: anObject	radio := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Circle class	instanceVariableNames: ''!!Circle class methodsFor: 'as yet unclassified' stamp: 'ema 5/18/2018 17:25'!conRadio: number	^ self new radio: number! !TestCase subclass: #FigureTest	instanceVariableNames: 'circulo triangulo cuadrado ancho alto radio paralelogramo'	classVariableNames: ''	poolDictionaries: ''	category: 'Practica7-Figura'!!FigureTest commentStamp: '<historical>' prior: 0!A FigureTest is a test class for testing the behavior of Figure!!FigureTest methodsFor: 'tests-calculations' stamp: 'ema 5/18/2018 17:39'!testParallelogramPerimetro	self assert: paralelogramo perimetro = ((2 * ancho) + (2 * alto))! !!FigureTest methodsFor: 'tests-calculations' stamp: 'toto 5/13/2016 12:50'!testSquareArea	self assert: (cuadrado area = (ancho * ancho)).! !!FigureTest methodsFor: 'tests-calculations' stamp: 'toto 5/13/2016 12:40'!testArea! !!FigureTest methodsFor: 'tests-calculations' stamp: 'FirstnameLastname 5/21/2017 21:45'!testCircleArea	self assert: (circulo area = (ancho * ancho * Float pi)).! !!FigureTest methodsFor: 'tests-calculations' stamp: 'ema 5/18/2018 17:38'!testTrianglePerimetro	self assert: triangulo perimetro = (3 * ancho)! !!FigureTest methodsFor: 'tests-calculations' stamp: 'ema 5/18/2018 17:35'!testPerimetro	! !!FigureTest methodsFor: 'tests-calculations' stamp: 'toto 5/13/2016 12:51'!testTriangleArea	self assert: (triangulo area = (3 sqrt / 4 * ancho * ancho )).! !!FigureTest methodsFor: 'tests-calculations' stamp: 'ema 5/18/2018 17:21'!testParallelogramArea	self assert: paralelogramo area = (alto * ancho)! !!FigureTest methodsFor: 'tests-calculations' stamp: 'ema 5/18/2018 17:41'!setUp	radio := 3.	ancho := 3.	alto := 2.	circulo := Circle conRadio: radio.	triangulo := Triangle conLado: ancho.	cuadrado := Square conLado: ancho.	paralelogramo := Parallelogram conBase: ancho Altura: alto! !!FigureTest methodsFor: 'tests-calculations' stamp: 'ema 5/18/2018 17:37'!testCirclePerimetro	self assert: circulo perimetro = (2 * ancho * Float pi)! !!FigureTest methodsFor: 'tests-calculations' stamp: 'ema 5/18/2018 17:38'!testSquarePerimetro	self assert: cuadrado perimetro = (4 * ancho)! !Figure subclass: #Parallelogram	instanceVariableNames: 'base altura'	classVariableNames: ''	poolDictionaries: ''	category: 'Practica7-Figura'!!Parallelogram methodsFor: 'accessing' stamp: 'ema 5/18/2018 17:24'!altura: anObject	altura := anObject! !!Parallelogram methodsFor: 'accessing' stamp: 'ema 5/18/2018 17:24'!altura	^ altura! !!Parallelogram methodsFor: 'accessing' stamp: 'ema 5/18/2018 17:24'!base: anObject	base := anObject! !!Parallelogram methodsFor: 'accessing' stamp: 'ema 5/19/2018 08:55'!perimetro	^ (2 * base + (2 * altura))! !!Parallelogram methodsFor: 'accessing' stamp: 'ema 5/19/2018 08:49'!area	^ base * altura	! !!Parallelogram methodsFor: 'accessing' stamp: 'ema 5/18/2018 17:24'!base	^ base! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Parallelogram class	instanceVariableNames: ''!!Parallelogram class methodsFor: 'as yet unclassified' stamp: 'ema 5/18/2018 17:26'!conBase: nbase Altura: naltura	^ (self new) base: nbase; altura: naltura! !Figure subclass: #Square	instanceVariableNames: 'lado'	classVariableNames: ''	poolDictionaries: ''	category: 'Practica7-Figura'!!Square methodsFor: 'accessing' stamp: 'ema 5/19/2018 08:56'!perimetro	^ 4 * lado! !!Square methodsFor: 'accessing' stamp: 'ema 5/18/2018 17:24'!lado	^ lado! !!Square methodsFor: 'accessing' stamp: 'ema 5/18/2018 17:24'!lado: anObject	lado := anObject! !!Square methodsFor: 'accessing' stamp: 'ema 5/19/2018 08:47'!area	^ lado * lado! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Square class	instanceVariableNames: ''!!Square class methodsFor: 'as yet unclassified' stamp: 'ema 5/18/2018 17:27'!conLado: number	^ self new lado: number! !Figure subclass: #Triangle	instanceVariableNames: 'lado'	classVariableNames: ''	poolDictionaries: ''	category: 'Practica7-Figura'!!Triangle methodsFor: 'accessing' stamp: 'ema 5/19/2018 08:56'!perimetro	^ 3 * lado! !!Triangle methodsFor: 'accessing' stamp: 'ema 5/18/2018 17:24'!lado	^ lado! !!Triangle methodsFor: 'accessing' stamp: 'ema 5/18/2018 17:24'!lado: anObject	lado := anObject! !!Triangle methodsFor: 'accessing' stamp: 'ema 5/19/2018 08:50'!area	^ (3 sqrt / 4 * lado * lado)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Triangle class	instanceVariableNames: ''!!Triangle class methodsFor: 'as yet unclassified' stamp: 'ema 5/19/2018 08:53'!conLado: number	^ self new lado: number! !