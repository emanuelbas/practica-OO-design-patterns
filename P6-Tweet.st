TestCase subclass: #TestTweet6	instanceVariableNames: 'base u1 u2'	classVariableNames: ''	poolDictionaries: ''	category: 'Practica6-Tweet'!!TestTweet6 methodsFor: 'tests' stamp: 'ema 5/25/2018 02:17'!testContarCantidadDeUserself		assert: (base tweetCountByUser at: u1)		equals: 4.	self assert: (base tweetCountByUserGender at: 'f') equals: 1! !!TestTweet6 methodsFor: 'initialization' stamp: 'ema 5/25/2018 02:19'!setUp	base := TweetBase6 new.	u1 := TweetUser6 new		nombre: 'Pepe';		genero: 'm'.	u2 := TweetUser6 new		nombre: 'Josefa';		genero: 'f'.	4 timesRepeat: [ base addTweet: (Tweet6 new user: u1) ].	1 timesRepeat: [ base addTweet: (Tweet6 new user: u2) ]! !Object subclass: #Tweet6	instanceVariableNames: 'user contenido'	classVariableNames: ''	poolDictionaries: ''	category: 'Practica6-Tweet'!!Tweet6 methodsFor: 'accessing' stamp: 'ema 5/25/2018 01:32'!contenido	^ contenido! !!Tweet6 methodsFor: 'accessing' stamp: 'ema 5/18/2018 03:29'!user: anObject	user := anObject! !!Tweet6 methodsFor: 'accessing' stamp: 'ema 5/25/2018 02:07'!userGender	^ user genero! !!Tweet6 methodsFor: 'accessing' stamp: 'ema 5/25/2018 01:32'!contenido: string	contenido := string! !!Tweet6 methodsFor: 'accessing' stamp: 'ema 5/18/2018 03:29'!user	^ user! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Tweet6 class	instanceVariableNames: ''!!Tweet6 class methodsFor: 'as yet unclassified' stamp: 'ema 5/18/2018 03:41'!user: unString genero: otroString	^ (self		new)		user: unString;		gender: otroString! !Object subclass: #TweetBase6	instanceVariableNames: 'tweets'	classVariableNames: ''	poolDictionaries: ''	category: 'Practica6-Tweet'!!TweetBase6 methodsFor: 'initialization' stamp: 'ema 5/25/2018 01:31'!initialize	tweets := Bag new.! !!TweetBase6 methodsFor: 'summarized data' stamp: 'ema 5/25/2018 02:04'!tweetCount: aSymbol	"Devuelve un diccionario de lo ingresado como simbolo"	| result |	result := Dictionary new.	tweets		do: [ :tweet | 			| valor |			valor := tweet perform: aSymbol.			result at: valor ifAbsentPut: 0.			result at: valor put: (result at: valor) + 1 ].	^ result! !!TweetBase6 methodsFor: 'summarized data' stamp: 'ema 5/25/2018 01:59'!tweetCountByUser	^ self tweetCount: #user! !!TweetBase6 methodsFor: 'summarized data' stamp: 'ema 5/25/2018 01:59'!tweetCountByUserGender	^ self tweetCount: #userGender! !!TweetBase6 methodsFor: 'adding' stamp: 'ema 5/25/2018 01:32'!addTweet: unTweet	tweets add: unTweet ! !!TweetBase6 methodsFor: 'adding' stamp: 'ema 5/25/2018 01:33'!tweets^ tweets! !Object subclass: #TweetUser6	instanceVariableNames: 'nombre genero'	classVariableNames: ''	poolDictionaries: ''	category: 'Practica6-Tweet'!!TweetUser6 methodsFor: 'accessing' stamp: 'ema 5/25/2018 01:33'!nombre: anObject	nombre := anObject! !!TweetUser6 methodsFor: 'accessing' stamp: 'ema 5/25/2018 01:33'!genero: anObject	genero := anObject! !!TweetUser6 methodsFor: 'accessing' stamp: 'ema 5/25/2018 01:33'!genero	^ genero! !!TweetUser6 methodsFor: 'accessing' stamp: 'ema 5/25/2018 01:33'!nombre	^ nombre! !