WAComponent subclass: #TDLCreatorComponent	instanceVariableNames: 'item titleComponent'	classVariableNames: ''	poolDictionaries: ''	category: 'toDoListApp'!!TDLCreatorComponent methodsFor: 'accessing' stamp: 'ema 6/17/2018 23:27'!titleComponent: anObject	titleComponent := anObject! !!TDLCreatorComponent methodsFor: 'accessing' stamp: 'ema 6/17/2018 23:27'!titleComponent	^ titleComponent! !!TDLCreatorComponent methodsFor: 'accessing' stamp: 'ema 6/17/2018 22:53'!item: anObject	item := anObject! !!TDLCreatorComponent methodsFor: 'accessing' stamp: 'ema 6/17/2018 22:53'!item	^ item! !!TDLCreatorComponent methodsFor: 'instance creation' stamp: 'ema 6/17/2018 23:27'!initialize	super initialize.	self newItem;	titleComponent: TDLTitleComponent new.! !!TDLCreatorComponent methodsFor: 'instance creation' stamp: 'ema 6/17/2018 22:52'!newItem	self item: ToDoItem new.! !!TDLCreatorComponent methodsFor: 'rendering' stamp: 'ema 6/17/2018 23:24'!renderDescriptionInputOn: html	html		tableData: [ html text: 'Comentarios: ' ];		tableData: [ html textInput placeholder: 'Descripcion y comentarios del item' ;callback: [ :comentario | self item agregarComentario: comentario ] ]! !!TDLCreatorComponent methodsFor: 'rendering' stamp: 'ema 6/17/2018 23:25'!renderButtonsOn: html	html		tableData;		tableData: [ html submitButton				callback: [ self answer: true ];				value: 'Guardar'.			html submitButton				callback: [ self answer: false ];				value: 'Cancelar' ]! !!TDLCreatorComponent methodsFor: 'rendering' stamp: 'ema 6/17/2018 23:31'!renderNameInputOn: html	html		tableData: [ html text: 'Nombre: ' ];		tableData: [ html textInput placeholder: 'Empezar TP framework'; on: #nombre of: self item ]! !!TDLCreatorComponent methodsFor: 'rendering' stamp: 'ema 6/17/2018 23:10'!renderContentOn: html	html div		class: 'nav-title';		with: self titleComponent.	html div		class: 'generic lightbox';		with: [ html heading				level: 2;				with: 'Crear Item'.			html horizontalRule.			html				form: [ html						table: [ html								tableRow: [ self renderNameInputOn: html ];								tableRow: [ self renderDescriptionInputOn: html ];								tableRow: [ self renderButtonsOn: html ] ] ] ]! !WAComponent subclass: #TDLItemDetailsComponent	instanceVariableNames: 'task titleComponent renderItemBlock'	classVariableNames: ''	poolDictionaries: ''	category: 'toDoListApp'!!TDLItemDetailsComponent methodsFor: 'initialization' stamp: 'ema 6/18/2018 18:39'!initialize	super initialize.	self titleComponent: TDLTitleComponent new! !!TDLItemDetailsComponent methodsFor: 'accessing' stamp: 'ema 6/18/2018 17:54'!titleComponent	^ titleComponent! !!TDLItemDetailsComponent methodsFor: 'accessing' stamp: 'ema 6/18/2018 17:58'!renderItemBlock	^ renderItemBlock! !!TDLItemDetailsComponent methodsFor: 'accessing' stamp: 'ema 6/18/2018 17:54'!titleComponent: anObject	titleComponent := anObject! !!TDLItemDetailsComponent methodsFor: 'accessing' stamp: 'ema 6/18/2018 17:54'!task	^ task! !!TDLItemDetailsComponent methodsFor: 'accessing' stamp: 'ema 6/18/2018 17:54'!task: anObject	task := anObject! !!TDLItemDetailsComponent methodsFor: 'accessing' stamp: 'ema 6/18/2018 17:58'!renderItemBlock: anObject	renderItemBlock := anObject! !!TDLItemDetailsComponent methodsFor: 'rendering' stamp: 'ema 6/18/2018 18:45'!renderContentOn: html	html div		class: 'nav-title';		with: self titleComponent.	self renderItemBlock value: task value: html.	html horizontalRule.	self task comentarios		do: [ :comentario | 			html text: comentario.			html anchor				callback: [ self task borrarComentario: comentario ];				with: 'Borrar'.				html break ].	html horizontalRule.	html heading		level: 3;		with: 'Nuevo Comentario'.	html		form: [ html				table: [ html						tableRow: [ self renderComentButtonOn: html task: task ];						tableRow: [ self renderSaveButtonOn: html ] ] ]! !!TDLItemDetailsComponent methodsFor: 'rendering' stamp: 'ema 6/18/2018 18:28'!renderComentButtonOn: html task: aTask	html		tableData: [ html textInput				placeholder: 'Descripcion y comentarios del item';				callback: [ :comentario | aTask agregarComentario: comentario ] ]! !!TDLItemDetailsComponent methodsFor: 'rendering' stamp: 'ema 6/18/2018 18:30'!renderSaveButtonOn: html	html		tableData: [ html submitButton				callback: [ self answer: true ];				value: 'Guardar Comentario' ]! !WAComponent subclass: #TDLItemsListComponent	instanceVariableNames: 'items filterBlock renderItemBlock'	classVariableNames: ''	poolDictionaries: ''	category: 'toDoListApp'!!TDLItemsListComponent methodsFor: 'rendering' stamp: 'ema 6/17/2018 23:40'!renderContentOn: html	html		table: [ (self filterBlock value: self items)				do: [ :item | html tableRow: [ self renderItemBlock value: item value: html ] ] ]! !!TDLItemsListComponent methodsFor: 'accessing' stamp: 'ema 6/17/2018 23:38'!items: anObject	items := anObject! !!TDLItemsListComponent methodsFor: 'accessing' stamp: 'ema 6/17/2018 23:38'!renderItemBlock	^ renderItemBlock! !!TDLItemsListComponent methodsFor: 'accessing' stamp: 'ema 6/17/2018 23:38'!filterBlock	^ filterBlock! !!TDLItemsListComponent methodsFor: 'accessing' stamp: 'ema 6/17/2018 23:38'!filterBlock: anObject	filterBlock := anObject! !!TDLItemsListComponent methodsFor: 'accessing' stamp: 'ema 6/17/2018 23:38'!items	^ items! !!TDLItemsListComponent methodsFor: 'accessing' stamp: 'ema 6/17/2018 23:38'!renderItemBlock: anObject	renderItemBlock := anObject! !WAComponent subclass: #TDLMenuComponent	instanceVariableNames: 'entries'	classVariableNames: ''	poolDictionaries: ''	category: 'toDoListApp'!!TDLMenuComponent methodsFor: 'accessing' stamp: 'ema 6/17/2018 22:21'!entries	^ entries! !!TDLMenuComponent methodsFor: 'accessing' stamp: 'ema 6/17/2018 22:21'!entries: anObject	entries := anObject! !!TDLMenuComponent methodsFor: 'rendering' stamp: 'ema 6/17/2018 22:24'!renderContentOn: html	self entries		do: [ :entry | 			html anchor				callback: entry value;				with: entry key ]		separatedBy: [ html space ]! !!TDLMenuComponent methodsFor: 'initialization' stamp: 'ema 6/17/2018 22:23'!initialize	super initialize.	entries := OrderedCollection new! !!TDLMenuComponent methodsFor: 'adding' stamp: 'ema 6/17/2018 22:21'!addEntry: aString withAction: aBlock	self entries add: aString -> aBlock! !WAComponent subclass: #TDLRootComponent	instanceVariableNames: 'titleComponent menuComponent listComponent creatorComponent detailsComponent'	classVariableNames: ''	poolDictionaries: ''	category: 'toDoListApp'!!TDLRootComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	creatorComponent:		<Object>	detailsComponent:		<Object>	listComponent:		<Object>	menuComponent:		<Object>	titleComponent:		<Object>    Implementation Points!!TDLRootComponent methodsFor: 'accessing' stamp: 'ema 6/17/2018 21:42'!menuComponent: anObject	menuComponent := anObject! !!TDLRootComponent methodsFor: 'accessing' stamp: 'ema 6/17/2018 21:42'!listComponent: anObject	listComponent := anObject! !!TDLRootComponent methodsFor: 'accessing' stamp: 'ema 6/17/2018 21:42'!detailsComponent	^ detailsComponent! !!TDLRootComponent methodsFor: 'accessing' stamp: 'ema 6/17/2018 21:42'!titleComponent: anObject	titleComponent := anObject! !!TDLRootComponent methodsFor: 'accessing' stamp: 'ema 6/17/2018 21:42'!titleComponent	^ titleComponent! !!TDLRootComponent methodsFor: 'accessing' stamp: 'ema 6/17/2018 21:42'!creatorComponent	^ creatorComponent! !!TDLRootComponent methodsFor: 'accessing' stamp: 'ema 6/17/2018 21:42'!menuComponent	^ menuComponent! !!TDLRootComponent methodsFor: 'accessing' stamp: 'ema 6/17/2018 21:42'!creatorComponent: anObject	creatorComponent := anObject! !!TDLRootComponent methodsFor: 'accessing' stamp: 'ema 6/17/2018 21:42'!listComponent	^ listComponent! !!TDLRootComponent methodsFor: 'accessing' stamp: 'ema 6/17/2018 21:42'!detailsComponent: anObject	detailsComponent := anObject! !!TDLRootComponent methodsFor: 'rendering' stamp: 'ema 6/19/2018 01:41'!renderTask: aTask asRowOn: html	html		tableData: [ html				tableData: [ html anchor						callback: [ self detailsComponent task: aTask.							self call: self detailsComponent ];						with: aTask nombre.					html break.					html text: aTask verEstado ] ].	aTask estaPendiente | aTask estaPausado		ifTrue: [ html				tableData: [ html anchor						callback: [ aTask play ];						with: 'play' ] ].	aTask estaEnProgreso		ifTrue: [ html				tableData: [ html anchor						callback: [ aTask pause ];						with: 'pause' ] ].	aTask estaEnProgreso | aTask estaPausado		ifTrue: [ html				tableData: [ html anchor						callback: [ aTask stop ];						with: 'finish' ] ].	html		tableData: [ html anchor				callback: [ TaskList singleton remove: aTask ];				with: 'delete' ]! !!TDLRootComponent methodsFor: 'rendering' stamp: 'ema 6/17/2018 22:36'!renderContentOn: html	html div		class: 'nav-title';		with: self titleComponent.	html div		class: 'nav-menu';		with: self menuComponent.	html horizontalRule .	html div		class: 'list';		with: self listComponent! !!TDLRootComponent methodsFor: 'as yet unclassified' stamp: 'ema 6/18/2018 00:22'!showFinishedItems	self listComponent filterBlock: [ :items | items select: [ :item | item estaTerminado ] ]! !!TDLRootComponent methodsFor: 'as yet unclassified' stamp: 'ema 6/18/2018 00:22'!showPendingItems	self listComponent filterBlock: [ :items | items select: [ :item | item estaPendiente ] ]! !!TDLRootComponent methodsFor: 'as yet unclassified' stamp: 'ema 6/18/2018 00:21'!showPausedItems	self listComponent		filterBlock: [ :items | items select: [ :item | item estaPausado  ] ]! !!TDLRootComponent methodsFor: 'as yet unclassified' stamp: 'ema 6/18/2018 00:22'!showInProgressItems	self listComponent filterBlock: [ :items | items select: [ :item | item estaEnProgreso  ] ]! !!TDLRootComponent methodsFor: 'as yet unclassified' stamp: 'ema 6/17/2018 22:17'!showAllItems	self listComponent filterBlock: [ :items | items ]! !!TDLRootComponent methodsFor: 'initialization' stamp: 'ema 6/18/2018 18:32'!initialize	super initialize.	self		creatorComponent: TDLCreatorComponent new;		initializeItemDetailsComponent ;		initializeListComponent;		initializeMenuComponent;		titleComponent: TDLTitleComponent new! !!TDLRootComponent methodsFor: 'initialization' stamp: 'ema 6/19/2018 01:07'!initializeListComponent	self listComponent: TDLItemsListComponent new.	self listComponent renderItemBlock: [ :task :html | self renderTask: task asRowOn: html ].	self showAllItems.	self listComponent items: TaskList singleton! !!TDLRootComponent methodsFor: 'initialization' stamp: 'ema 6/17/2018 22:44'!initializeMenuComponent	self		menuComponent:			(TDLMenuComponent new				addEntry: 'Todos' withAction: [ self showAllItems ];				addEntry: 'Pendientes' withAction: [ self showPendingItems ];				addEntry: 'En progreso' withAction: [ self showInProgressItems ];				addEntry: 'Pausados' withAction: [ self showPausedItems ];				addEntry: 'Finalizados' withAction: [ self showFinishedItems ];				addEntry: 'Agregar item' withAction: [ self createNewItem  ];				yourself)! !!TDLRootComponent methodsFor: 'initialization' stamp: 'ema 6/18/2018 18:36'!initializeItemDetailsComponent	self detailsComponent: TDLItemDetailsComponent new.	self detailsComponent		renderItemBlock: [ :task :html | self renderTask: task asRowOn: html ]! !!TDLRootComponent methodsFor: 'menu protocol' stamp: 'ema 6/18/2018 15:49'!createNewItem	| answer |	answer := self call: self creatorComponent newItem.	answer		ifTrue: [ self listComponent items add: self creatorComponent item. self showAllItems  ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TDLRootComponent class	instanceVariableNames: ''!!TDLRootComponent class methodsFor: 'testing' stamp: 'ema 6/17/2018 21:38'!canBeRoot	^true! !WAComponent subclass: #TDLTitleComponent	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'toDoListApp'!!TDLTitleComponent methodsFor: 'accessing' stamp: 'ema 6/17/2018 21:49'!title	^ 'ToDoList App'! !!TDLTitleComponent methodsFor: 'accessing' stamp: 'ema 6/17/2018 21:51'!renderContentOn: html	html heading: self title! !Object subclass: #TaskList	instanceVariableNames: ''	classVariableNames: 'singleton'	poolDictionaries: ''	category: 'toDoListApp'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TaskList class	instanceVariableNames: ''!!TaskList class methodsFor: 'accessing' stamp: 'ema 6/19/2018 01:37'!singleton	singleton ifNil: [ singleton := OrderedCollection new ].	^ singleton! !!TaskList class methodsFor: 'accessing' stamp: 'ema 6/19/2018 00:58'!new	^ self shouldBeImplemented ! !Object subclass: #ToDoItem	instanceVariableNames: 'nombre estado fechaCreacion fechaFin fechaInicio comentarios'	classVariableNames: ''	poolDictionaries: ''	category: 'toDoListApp'!!ToDoItem methodsFor: 'accessing' stamp: 'ema 6/17/2018 21:28'!fechaFin	^ fechaFin! !!ToDoItem methodsFor: 'accessing' stamp: 'ema 6/17/2018 21:28'!estado	^ estado! !!ToDoItem methodsFor: 'accessing' stamp: 'ema 6/17/2018 23:13'!nombre: anObject	nombre := anObject! !!ToDoItem methodsFor: 'accessing' stamp: 'ema 6/17/2018 21:28'!fechaFin: anObject	fechaFin := anObject! !!ToDoItem methodsFor: 'accessing' stamp: 'ema 6/17/2018 21:28'!comentarios: anObject	comentarios := anObject! !!ToDoItem methodsFor: 'accessing' stamp: 'ema 6/18/2018 14:58'!fechaInicio	^ fechaInicio! !!ToDoItem methodsFor: 'accessing' stamp: 'ema 6/18/2018 14:58'!fechaInicio: anObject	fechaInicio := anObject! !!ToDoItem methodsFor: 'accessing' stamp: 'ema 6/17/2018 23:13'!nombre	^ nombre! !!ToDoItem methodsFor: 'accessing' stamp: 'ema 6/17/2018 21:28'!comentarios	^ comentarios! !!ToDoItem methodsFor: 'accessing' stamp: 'ema 6/17/2018 21:28'!estado: anObject	estado := anObject! !!ToDoItem methodsFor: 'accessing' stamp: 'ema 6/17/2018 21:28'!fechaCreacion	^ fechaCreacion! !!ToDoItem methodsFor: 'accessing' stamp: 'ema 6/18/2018 14:22'!stop	self estado stop! !!ToDoItem methodsFor: 'accessing' stamp: 'ema 6/17/2018 21:28'!fechaCreacion: anObject	fechaCreacion := anObject! !!ToDoItem methodsFor: 'async' stamp: 'ema 6/18/2018 14:22'!pause	self estado pause! !!ToDoItem methodsFor: 'initialization' stamp: 'ema 6/18/2018 15:35'!initialize	super initialize.	self		comentarios: OrderedCollection new;		nombre: String new;		fechaCreacion: DateAndTime today;		estado: (PendingState task: self)! !!ToDoItem methodsFor: 'as yet unclassified' stamp: 'ema 6/18/2018 15:01'!verEstado	^ self estado verEstado! !!ToDoItem methodsFor: 'as yet unclassified' stamp: 'ema 6/18/2018 13:34'!estaEnProgreso	^ self estado estaEnProgreso ! !!ToDoItem methodsFor: 'as yet unclassified' stamp: 'ema 6/18/2018 13:34'!estaPausado	^ self estado estaPausado! !!ToDoItem methodsFor: 'as yet unclassified' stamp: 'ema 6/18/2018 13:34'!estaTerminado	^ self estado estaTerminado! !!ToDoItem methodsFor: 'as yet unclassified' stamp: 'ema 6/18/2018 13:34'!estaPendiente	^ self estado estaPendiente! !!ToDoItem methodsFor: 'as yet unclassified' stamp: 'ema 6/17/2018 21:29'!agregarComentario: unString	self comentarios add: unString! !!ToDoItem methodsFor: 'as yet unclassified' stamp: 'ema 6/18/2018 18:19'!borrarComentario: unComentario	self comentarios remove: unComentario ! !!ToDoItem methodsFor: 'playing' stamp: 'ema 6/18/2018 14:22'!play	self estado play! !Object subclass: #ToDoItemState	instanceVariableNames: 'task'	classVariableNames: ''	poolDictionaries: ''	category: 'toDoListApp'!!ToDoItemState methodsFor: 'playing' stamp: 'ema 6/18/2018 14:24'!play	^ self subclassResponsibility ! !!ToDoItemState methodsFor: 'async' stamp: 'ema 6/18/2018 14:25'!pause	^ self subclassResponsibility! !!ToDoItemState methodsFor: 'as yet unclassified' stamp: 'ema 6/18/2018 13:35'!estaEnProgreso	^ false! !!ToDoItemState methodsFor: 'as yet unclassified' stamp: 'ema 6/18/2018 13:35'!estaPausado	^ false! !!ToDoItemState methodsFor: 'as yet unclassified' stamp: 'ema 6/18/2018 13:36'!estaTerminado	^ false! !!ToDoItemState methodsFor: 'as yet unclassified' stamp: 'ema 6/18/2018 13:35'!estaPendiente	^ false! !!ToDoItemState methodsFor: 'accessing' stamp: 'ema 6/18/2018 15:01'!verEstado	^ self subclassResponsibility! !!ToDoItemState methodsFor: 'accessing' stamp: 'ema 6/18/2018 14:46'!task	^ task! !!ToDoItemState methodsFor: 'accessing' stamp: 'ema 6/18/2018 14:45'!task: aTask	task := aTask! !!ToDoItemState methodsFor: 'accessing' stamp: 'ema 6/18/2018 14:25'!stop	^ self subclassResponsibility! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ToDoItemState class	instanceVariableNames: ''!!ToDoItemState class methodsFor: 'accessing' stamp: 'ema 6/18/2018 14:44'!task: aTask	^ self new task: aTask! !ToDoItemState subclass: #FinishedState	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'toDoListApp'!!FinishedState methodsFor: 'async' stamp: 'ema 6/18/2018 14:41'!pause	! !!FinishedState methodsFor: 'accessing' stamp: 'ema 6/18/2018 15:26'!verEstado	| tiempo |	tiempo := self task fechaFin - self task fechaInicio.	^ 'Terminada en ' , tiempo hours asString  , 'hs ' , tiempo minutes asString , 'm'! !!FinishedState methodsFor: 'accessing' stamp: 'ema 6/18/2018 14:41'!stop	! !!FinishedState methodsFor: 'as yet unclassified' stamp: 'ema 6/18/2018 13:53'!estaTerminado	^ true! !!FinishedState methodsFor: 'playing' stamp: 'ema 6/18/2018 14:41'!play! !ToDoItemState subclass: #InProgressState	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'toDoListApp'!!InProgressState methodsFor: 'playing' stamp: 'ema 6/18/2018 14:49'!pause	self task estado:( PausedState task: self task)! !!InProgressState methodsFor: 'playing' stamp: 'ema 6/18/2018 14:41'!play! !!InProgressState methodsFor: 'playing' stamp: 'ema 6/18/2018 14:49'!stop	self task fechaFin: DateAndTime now.	self task estado:( FinishedState task: self task)! !!InProgressState methodsFor: 'as yet unclassified' stamp: 'ema 6/18/2018 13:53'!estaEnProgreso	^ true! !!InProgressState methodsFor: 'accessing' stamp: 'ema 6/18/2018 15:26'!verEstado	| tiempo |	tiempo := self task fechaInicio - DateAndTime now.	^ 'Comenzada hace ' , tiempo hours asString , 'hs ' , tiempo minutes asString , 'm'! !ToDoItemState subclass: #PausedState	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'toDoListApp'!!PausedState methodsFor: 'async' stamp: 'ema 6/18/2018 14:54'!pause! !!PausedState methodsFor: 'accessing' stamp: 'ema 6/18/2018 15:39'!verEstado	| tiempo |	tiempo := self task fechaInicio - DateAndTime now.	^ 'Pausada - Comenzada hace ' , tiempo hours asString , 'hs ' , tiempo minutes asString , 'm'! !!PausedState methodsFor: 'accessing' stamp: 'ema 6/18/2018 14:53'!stop	self task fechaFin: DateAndTime now.	self task estado: (FinishedState task: self task)! !!PausedState methodsFor: 'as yet unclassified' stamp: 'ema 6/18/2018 13:54'!estaPausado	^ true! !!PausedState methodsFor: 'playing' stamp: 'ema 6/18/2018 14:52'!play	self task estado: (InProgressState task: self task)! !ToDoItemState subclass: #PendingState	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'toDoListApp'!!PendingState methodsFor: 'as yet unclassified' stamp: 'ema 6/18/2018 13:54'!estaPendiente	^ true! !!PendingState methodsFor: 'accessing' stamp: 'ema 6/18/2018 15:17'!verEstado	^'Pendiente'! !!PendingState methodsFor: 'accessing' stamp: 'ema 6/18/2018 14:57'!stop	! !!PendingState methodsFor: 'playing' stamp: 'ema 6/18/2018 14:57'!play	self task fechaInicio: DateAndTime now.	self task estado: (InProgressState task: self task)! !!PendingState methodsFor: 'async' stamp: 'ema 6/18/2018 14:57'!pause! !